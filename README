Jeff McCune <jeff@puppetlabs.com>
2010-07-07

Quick Start
===========

* Kickstart a new machine - linux text ks=http://bit.ly/puppetks
* Log in as root via SSH
* Unpack a copy of puppetlabs-bootstrap in /opt/puppetlabs/puppetlabs-bootstrap
* export PATH=/opt/puppetlabs/puppetlabs-bootstrap/bin:$PATH
* Use pb_ as a prefix and do tab-completion on the shell to see the setup
  steps available to you.  The scripts are designed to be executed in order.

Once the account initialization script has been executed, you may ssh
into the machine using your personal account and ssh key authorization

Sudo will be configured to not require passwords (Accounts created by
puppetlabs-bootstrap do not have passwords) and will preserve the path.

To update when running under your own account:
* cd /opt/puppetlabs/puppetlabs-bootstrap
* sudo SSH_AUTH_SOCK=$SSH_AUTH_SOCK git fetch upstream
* sudo checkout master
* sudo git merge upstream/master

Overview
========

This project provides the means to bootstrap fully functional
puppet systems.

The project will eventually be packaged for distribution,
so only the bare requirements to get puppet running should be
included here.  This project will be responsible for bringing
up more up to date suites of tools like puppet 2.6.0.

Please report issues with this project at:
 * http://projects.puppetlabs.com/projects/modules
 * Sign in to file a new issue ticket

The use cases of these systems are:
 * Production. puppet master, dashboard, etc...
 * Evaluation. puppet for exploring new versions and features.
 * Testing.  Execute performance tests against arbitrary puppet versions.
 * Demonstrations.  Create virtual machines or enviornments for demons.
 * Training.  Similar to demonstrations, but distributable to students.
 * Integration.  Provide a software stack that's tested and integrated well.

The goals of this project:
 * Ease of use.  Customization should be straight forward.
 * Follow best practices.  Module standards, documentation, etc...
 * Publish modules and code to the Forge to help the community.
 * Provide a stable software stack for the community.
 * Mitigate issues integrating projects like rubygems, passenger, etc..
 * Provide clear documentation and solutions to common problems.

